//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: SerialisationTemplate.bt
//   Purpose: Ha elromlana valamiért a Serialisation.cs itt manuálisan meg lehet nézni
//            mit produkált és mi a baj.
//------------------------------------------------

int32 fieldCount <bgcolor=cLtGray>;

typedef struct {
    byte length;
    byte content[length] <optimize=false>;
} csString <read=ReadCSString>;

string ReadCSString(csString& s) {
    char v[s.length + 1];
    local uint32 i = 0;
    for(i = 0; i < s.length; i++) {
        v[i] = s.content[i];
    }

    string v1;
    SPrintf(v1, "%s", v);
    return v1;
}

typedef struct {
    csString typeName;
    int32 numericValue;
} csEnum <read=ReadEnum>;

string ReadEnum(csEnum& v) {
    string s;
    SPrintf(s, "%d (%s)", v.numericValue, ReadCSString(v.typeName));

    return s; 
}

string ReadRecordType(byte& recordType) {
    if(recordType == 0) {
        return "string";
    } else if(recordType == 1) {
        return "int";
    } else if(recordType == 2) {
        return "long";
    } else if(recordType == 3) {
        return "double";
    } else if(recordType == 4) {
        return "float";
    } else if(recordType == 5) {
        return "bool";
    } else if(recordType == 6) {
        return "byte";
    } else if(recordType == 9) {
        return "enum";
    } else if(recordType == 8) {
        return "array";
    }

    return "null";
}

string ReadBool0(byte& v) {
    if(v == 1) {
        return "true";
    }

    return "false";
}

typedef struct {
    byte beginPad <bgcolor=cLtGray>;

    csString key;

    byte fieldType <read=ReadRecordType>;

    if(fieldType == 0) {
        csString content;
    } else if(fieldType == 1) {
        int32 content;
    } else if(fieldType == 2) {
        int64 content;
    } else if(fieldType == 3) {
        double content;
    } else if(fieldType == 4) {
        double content;
    } else if(fieldType == 5) {
        byte content <read=ReadBool0>;
    } else if(fieldType == 6) {
        ubyte content;
    } else if(fieldType == 9) {
        csEnum content;
    }

    byte endPad <bgcolor=cLtGray>;
} csArrayElement <read=ReadArrayRecord, bgcolor=cBlack>;

typedef struct {
    byte arrayType;
        
    if(arrayType == 9) {
        csString explicitType;
    }

    int32 arrayLength;
    csArrayElement arrayContent[arrayLength] <optimize=false>;
} csArray <read=ReadCSArray>;

string ReadCSArray(csArray& v) {
    string s;
    SPrintf(s, "%s[%d]", ReadRecordType(v.arrayType), v.arrayLength);
    return s;
}

typedef struct {
    byte beginPad <bgcolor=cLtGray>;

    csString key;

    byte fieldType <read=ReadRecordType>;

    if(fieldType == 0) {
        csString content ;
    } else if(fieldType == 1) {
        int32 content;
    } else if(fieldType == 2) {
        int64 content;
    } else if(fieldType == 3) {
        double content;
    } else if(fieldType == 4) {
        double content;
    } else if(fieldType == 5) {
        byte content <read=ReadBool0>;
    } else if(fieldType == 6) {
        ubyte content;
    } else if(fieldType == 9) {
        csEnum content;
    } else if(fieldType == 8) {
        csArray content;
    }

    byte endPad <bgcolor=cLtGray>;
} record <read=ReadRecord, bgcolor=cBlack>;

string ReadRecord(record& r) {
    return ReadCSString(r.key);
}

string ReadArrayRecord(csArrayElement& r) {
    return ReadRecordType(r.fieldType);
}

local uint32 i;
for(i = 0; i < fieldCount; i++) {
    record field;
}